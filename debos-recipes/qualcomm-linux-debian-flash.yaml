{{- $build_qcm6490 := or .build_qcm6490 "true" }}
{{- $build_rb1 := "false" -}}
{{- if .u_boot_rb1 -}}
{{- $build_rb1 = "true" }}
{{- end -}}

architecture: arm64

actions:
  - action: download
    description: Download qcom-ptool
    url: https://github.com/qualcomm-linux/qcom-ptool/archive/refs/heads/main.tar.gz
    name: qcom-ptool
    filename: qcom-ptool.tar.gz
    unpack: true

{{- $boards := list }}
{{- if eq $build_qcm6490 "true" }}
{{- $boards = append $boards (dict
    "name" "qcs6490-rb3gen2-vision-kit"
    "silicon_family" "qcm6490"
    "platform" "qcs6490-rb3gen2"
    "boot_binaries_download" (dict
        "description" "QCM6490 boot binaries"
        "url" "https://softwarecenter.qualcomm.com/download/software/chip/qualcomm_linux-spf-1-0/qualcomm-linux-spf-1-0_test_device_public/r1.0_00095.0/qcm6490-le-1-0/common/build/ufs/bin/QCM6490_bootbinaries.zip"
        "name" "qcm6490_boot-binaries"
        "filename" "qcm6490_boot-binaries.zip"
        "sha256sum" "9c100d7b184ecf0ab9c4be71a8bb7c243fdc79a64380ca3025024dd2b14c5078"
    )
    "cdt_download" (dict
        "description" "RB3 Gen2 Vision Kit CDT"
        "url" "https://artifacts.codelinaro.org/artifactory/codelinaro-le/Qualcomm_Linux/QCS6490/cdt/rb3gen2-vision-kit.zip"
        "name" "qcs6490-rb3gen2-vision-kit_cdt"
        "filename" "qcs6490-rb3gen2-vision-kit_cdt.zip"
        "sha256sum" "a339e297b454c4dc3805fe8cd11d6d8dcb801aa8f0c2dc691561c2785019fa3c"
    )
    "cdt_filename" "cdt_vision_kit.bin"
    "dtb" "qcom/qcs6490-rb3gen2.dtb"
    "disk_image_type" "ufs"
)}}
{{- end }}
{{- if eq $build_rb1 "true" }}
{{- $boards = append $boards (dict
    "name" "qrb2210-rb1"
    "silicon_family" "qcm2290"
    "platform" "qrb2210-rb1"
    "boot_binaries_download" (dict
        "description" "RB1 rescue image"
        "url" "https://releases.linaro.org/96boards/rb1/linaro/rescue/23.12/rb1-bootloader-emmc-linux-47528.zip"
        "name" "qrb2210-rb1_rescue-image"
        "filename" "qrb2210-rb1_rescue-image.zip"
        "sha256sum" "c75b6c63eb24c8ca36dad08ba4d4e93f3f4cd7dce60cf1b6dfb5790dc181cc3d"
    )
    "disk_image_type" "sdcard"
    "u_boot_file" .u_boot_rb1
)}}
{{- end }}

{{- range $board := $boards }}
  - action: download
    description: Download of {{ $board.boot_binaries_download.description }}
    url: {{ $board.boot_binaries_download.url }}
    name: {{ $board.boot_binaries_download.name }}
    filename: {{ $board.boot_binaries_download.filename }}
  - action: run
    description: Verify SHA256 sum of {{ $board.boot_binaries_download.description }}
    chroot: false
    command:
      echo "{{ $board.boot_binaries_download.sha256sum }} ${ROOTDIR}/../{{ $board.boot_binaries_download.filename }}" |
          sha256sum --strict -c -
  {{- if $board.cdt_download }}
  - action: download
    description: Download of {{ $board.cdt_download.description }}
    url: {{ $board.cdt_download.url }}
    name: {{ $board.cdt_download.name }}
    filename: {{ $board.cdt_download.filename }}
  - action: run
    description: Verify SHA256 sum of {{ $board.cdt_download.description }}
    chroot: false
    command:
      echo "{{ $board.cdt_download.sha256sum }} ${ROOTDIR}/../{{ $board.cdt_download.filename }}" |
          sha256sum --strict -c -
  {{- end }}
{{- end }}

  - action: run
    description: Generate flash directories for eMMC and UFS boards
    chroot: false
    command: |
      set -eux
      # work dir that will be thrown away
      mkdir -v build

      # path to unpacked qcom-ptool tarball
      QCOM_PTOOL="${ROOTDIR}/../qcom-ptool.tar.gz.d/qcom-ptool-main"

{{- range $board := $boards }}
      ### board: {{ $board.name }}
      ### platform: {{ $board.platform }}
      ### silicon family: {{ $board.silicon_family }}

      # unpack boot binaries
      mkdir -v build/{{ $board.name }}_boot-binaries
      unzip "${ROOTDIR}/../{{ $board.boot_binaries_download.filename }}" \
          -d build/{{ $board.name }}_boot-binaries/unpack
      # strip top directories
      mv build/{{ $board.name }}_boot-binaries/unpack/*/* build/{{ $board.name }}_boot-binaries
      rmdir -v build/{{ $board.name }}_boot-binaries/unpack/* build/{{ $board.name }}_boot-binaries/unpack

      # generate partition files
      mkdir -v build/{{ $board.platform }}_partitions
      (
          cd build/{{ $board.platform }}_partitions
          conf="${QCOM_PTOOL}/platforms/{{ $board.platform }}/partitions.conf"
          "${QCOM_PTOOL}/gen_partition.py" -i "$conf" \
              -o ptool-partitions.xml
          # partitions.conf sets --type=emmc, nand or ufs
          if grep -F '^--disk --type=ufs ' "${conf}"; then
              touch flash-ufs
          elif grep -F '^--disk --type=emmc ' "${conf}"; then
              touch flash-emmc
          fi
          "${QCOM_PTOOL}/ptool.py" -x ptool-partitions.xml
      )

      # create board-specific flash directory
      flash_dir="${ARTIFACTDIR}/flash_{{ $board.name }}"
      rm -rf "${flash_dir}"
      mkdir -v "${flash_dir}"
      # copy platform partition files
      cp --preserve=mode,timestamps -v build/{{ $board.platform }}_partitions/* \
          "${flash_dir}"
      # remove BLANK_GPT and WIPE_PARTITIONS files as it's common for people
      # to run "qdl rawprogram*.xml", mistakingly including these; perhaps
      # ptool should have a flag not to generate these; note that there are
      # wipe_rawprogram*.xml files still
      rm -v "${flash_dir}"/rawprogram*_BLANK_GPT.xml
      rm -v "${flash_dir}"/rawprogram*_WIPE_PARTITIONS.xml
      # copy silicon family boot binaries; these shouldn't ship partition
      # files, but make sure not to accidentally clobber any such file
      find build/{{ $board.name }}_boot-binaries \
          -not -name 'gpt_*' \
          -not -name 'patch*.xml' \
          -not -name 'rawprogram*.xml' \
          -not -name 'wipe*.xml' \
          -not -name 'zeros_*' \
          \( \
              -name LICENSE \
              -or -name Qualcomm-Technologies-Inc.-Proprietary \
              -or -name 'prog_*' \
              -or -name '*.bin' \
              -or -name '*.elf' \
              -or -name '*.fv' \
              -or -name '*.mbn' \
          \) \
          -exec cp --preserve=mode,timestamps -v '{}' "${flash_dir}" \;
      {{- if $board.u_boot_file }}
      # copy U-Boot binary to boot.img;
      # qcom-ptool/platforms/*/partitions.conf uses filename=boot.img
      # boot_a and boot_b partitions
      cp --preserve=mode,timestamps -v "${ARTIFACTDIR}/{{ $board.u_boot_file }}" \
          "${flash_dir}/boot.img"
      {{- end }}

      {{- if $board.cdt_download }}
      # unpack board CDT
      unzip "${ROOTDIR}/../{{ $board.cdt_download.filename }}" \
          -d build/{{ $board.name }}_cdt
      # copy just the CDT data; no partition or flashing files
      cp --preserve=mode,timestamps -v build/{{ $board.name }}_cdt/{{ $board.cdt_filename }} \
          "${flash_dir}"

      # update flashing files for CDT
      sed -i '/label="cdt"/s/filename=""/filename="{{ $board.cdt_filename }}"/' \
          "${flash_dir}"/rawprogram*.xml
      {{- end }}

      {{- if $board.dtb }}
      # generate a dtb.bin FAT partition with just a single dtb for the current
      # board; long-term this should really be a set of dtbs and overlays as to
      # share dtb.bin across boards
      dtb_bin="${flash_dir}/dtb.bin"
      rm -f "${dtb_bin}"
      # dtb.bin is only used in UFS based boards at the moment and UFS uses a
      # 4k sector size, so pass -S 4096
      # in qcom-ptool/platforms/*/partitions.conf, dtb_a and _b partitions
      # are provisioned with 64MiB; create a 4MiB FAT that will comfortably fit
      # in these and hold the target device tree, which is 4096 KiB sized
      # blocks for mkfs.vfat's last argument
      mkfs.vfat -S 4096 -C "${dtb_bin}" 4096
      # extract board device tree from the root filesystem provided tarball
      tar -C build -xvf "${ARTIFACTDIR}/dtbs.tar.gz" "{{ $board.dtb }}"
      # copy into the FAT as combined-dtb.dtb
      mcopy -vmp -i "${dtb_bin}" "build/{{ $board.dtb }}" ::/combined-dtb.dtb
      # (NB: flashing files already expect "dtb.bin" as a filename)
      {{- end }}

      # update flashing files for ESP image;
      # qcom-ptool/platforms/*/partitions.conf uses filename=efi.bin for the
      # ESP partition on EFI capable platforms
      sed -i '/label="efi"/s#filename="[^"]*"#filename="../disk-{{ $board.disk_image_type }}.img1"#' \
          "${flash_dir}"/rawprogram*.xml

      # update flashing files for rootfs image;
      # qcom-ptool/platforms/*/partitions.conf uses filename=rootfs.img for the
      # rootfs partition
      sed -i \
          '/label="rootfs"/s#filename="[^"]*"#filename="../disk-{{ $board.disk_image_type }}.img2"#' \
          "${flash_dir}"/rawprogram*.xml
{{- end }}

      # cleanup
      rm -rf build

# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause
