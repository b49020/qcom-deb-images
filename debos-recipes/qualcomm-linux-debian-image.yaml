{{- $dtb := or .dtb "firmware" }}
{{- $imagesize := or .imagesize "4GiB" }}
{{- $imagetype := or .imagetype "ufs" }}
{{- $image := printf "disk-%s.img" $imagetype }}

architecture: arm64
sectorsize: {{if eq $imagetype "ufs"}}4096{{else}}512{{end}}

actions:
  - action: unpack
    description: Unpack root filesystem
    compression: gz
    file: rootfs.tar.gz

{{- if ne $dtb "firmware" }}
  - action: run
    description: Use OS device tree override (board specific)
    chroot: true
    command: |
      set -eux
      mkdir -pv /etc/kernel
      echo "{{ $dtb }}" >/etc/kernel/devicetree
{{- end }}

  # parttype values are from:
  # https://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/
  - action: image-partition
    description: Create an image file
    imagename: {{ $image }}
    imagesize: {{ $imagesize }}
    partitiontype: gpt
    partitions:
      - name: esp
        partlabel: ESP
        flags: [ boot, esp ]
        # EFI System Partition
        parttype: c12a7328-f81f-11d2-ba4b-00a0c93ec93b
        fs: vfat
        start: 4MiB
        # size of 512MiB
        end: 516MiB
        fsck: true
      - name: root
        # Root Partition (64-bit ARM/AArch64)
        parttype: b921b045-1df0-41c3-af44-4c6f280d3fae
        fs: ext4
        # 4MiB after ESP
        start: 520MiB
        end: 100%
        fsck: true
    mountpoints:
      - mountpoint: /boot/efi/
        partition: esp
      - mountpoint: /
        partition: root

  # XXX these kernel options might be specific to a kernel version or board
  - action: filesystem-deploy
    description: Deploy root filesystem to mounted image
    setup-fstab: true
    append-kernel-cmdline: clk_ignore_unused pd_ignore_unused audit=0 deferred_probe_timeout=30

  - action: apt
    description: Make system bootable with systemd-boot
    recommends: true
    packages:
      - systemd-boot
      # TODO investigate why systemd-boot Recommends: shim-signed which
      # Depends on grub packages
      - shim-signed-

  - action: run
    description: Create task to grow root filesystem on first boot
    chroot: true
    command: |
      set -eux
      # for growpart
      apt -y install cloud-guest-utils
      # extract the dev of the root filesystem from fstab; change UUID=id into
      # /dev/disk/by-uuid/id
      ROOTFS_DEV=$(
          awk '$2 == "/" {gsub("UUID=", "/dev/disk/by-uuid/"); print $1}' \
              /etc/fstab
          )
      # generate systemd unit to grow the second partition with above UUID
      cat >/etc/systemd/system/debos-grow-rootfs.service <<EOF
      [Unit]
      Description=Grow root partition and filesystem (debos)
      [Service]
      Type=oneshot
      ExecStartPre=-sh -c 'growpart /dev/\`lsblk -n -o pkname $ROOTFS_DEV\` 2'
      ExecStart=resize2fs $ROOTFS_DEV
      [Install]
      WantedBy=default.target
      EOF
      # enable unit
      systemctl enable debos-grow-rootfs

  - action: run
    description: Extract partition images
    postprocess: true
    command: |
      set -eux
      sector_size="{{if eq $imagetype "ufs"}}4096{{else}}512{{end}}"
      image="{{ $image }}"
      fdisk -b "${sector_size}" -l "${image}" |
          sed -n '1,/^Device/ d; p' |
          while read name start end sectors rest; do
              dd if="${image}" of="${ARTIFACTDIR}/${name}" \
                  bs="${sector_size}" skip="${start}" count="${sectors}"
          done

  - action: run
    description: Compress image file
    postprocess: true
    command: gzip -v -f "${ARTIFACTDIR}/{{ $image }}"

